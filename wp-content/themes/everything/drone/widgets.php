<?php
 namespace Drone\Widgets; use Drone\Func; use Drone\HTML; use Drone\Options; use Drone\Theme; const INC_FILENAME = 'widgets.php'; class Widget extends \WP_Widget { const LABEL_SEPARATOR = '|'; public static $_on_setup_options = array(); public static $_on_html = array(); public static $_on_output_html = array(); private $_options; private $_domain; private $_id; protected function onSetupOptions(\Drone\Options\Group\Widget $options) { } public function onOptionsCompatybility(array &$data, $version) { } protected function onWidget(array $args, \Drone\HTML &$html) { } protected function getOptions(array $data = null) { $options = new Options\Group\Widget(str_replace('[#]', '', $this->get_field_name('#'))); $this->onSetupOptions($options); \Drone\do_action('widget_'.str_replace('-', '_', $this->_id).'_on_setup_options', $options, $this); if (isset(self::$_on_setup_options[$this->_id]) && is_callable(self::$_on_setup_options[$this->_id])) { _deprecated_function(__METHOD__.'::$_on_setup_options', '5.0', 'drone_widget_'.str_replace('-', '_', $this->_id).'_on_setup_options action'); call_user_func_array(self::$_on_setup_options[$this->_id], array($this, $options)); } if ($data !== null) { $options->fromArray($data, array($this, 'onOptionsCompatybility')); } return $options; } public function __construct($label, $description = '', $class = '', $width = null) { $this->_domain = Theme::getInstance()->domain; $this->_id = Func::stringID( str_replace( array(__CLASS__, Theme::getInstance()->class.'\Widgets\Widget', Theme::getInstance()->class.'Widget', Theme::getInstance()->class), '', get_class($this) ) ); parent::__construct( \Drone\apply_filters('widget_id_base', Theme::getInstance()->theme->id.'-'.$this->_id, $this->_id), Theme::getInstance()->theme->name.' '.self::LABEL_SEPARATOR.' '.$label, array('description' => $description, 'classname' => $class ? $class : 'widget-'.$this->_id), array('width' => $width) ); } public function __get($name) { switch ($name) { case '_domain': case '_id': return $this->{$name}; } } public function getTransientName($name) { return Theme::getInstance()->getTransientName("{$this->_id}_{$this->number}_{$name}"); } public function wo_($name, $skip_if = null) { return $this->_options->findChild($name, $skip_if); } public function wo($name, $skip_if = null, $fallback = null) { $child = $this->wo_($name, $skip_if); return $child !== null && $child->isOption() ? $child->value : $fallback; } public function form($instance) { echo HTML::div() ->class('drone-widget-options') ->add($this->getOptions($instance)->html()) ->html(); } public function update($new_instance, $old_instance) { $options = $this->getOptions($old_instance); $options->change($new_instance); return $options->toArray(); } public function widget($args, $instance) { $this->_options = $this->getOptions($instance); $html = HTML::make(); $this->onWidget((array)$args, $html); if (!$html->tag && $html->count() == 0) { return; } $html = \Drone\apply_filters('widget_'.str_replace('-', '_', $this->_id).'_widget', $html, $this, $args); if (isset(self::$_on_html[$this->_id]) && is_callable(self::$_on_html[$this->_id])) { _deprecated_function(__METHOD__.'::$_on_html', '5.0', 'drone_widget_'.str_replace('-', '_', $this->_id).'_widget filter'); call_user_func_array(self::$_on_html[$this->_id], array($this, &$html)); } $output = HTML::make()->add($args['before_widget']); if ($title = $this->wo('title')) { $output->add( $args['before_title'], \apply_filters('widget_title', $title, $instance, $this->id_base), $args['after_title'] ); } $output->add($html, $args['after_widget']); $output = \Drone\apply_filters('widget_'.str_replace('-', '_', $this->_id).'_output', $output, $this, $args); if (isset(self::$_on_output_html[$this->_id]) && is_callable(self::$_on_output_html[$this->_id])) { _deprecated_function(__METHOD__.'::$_on_html', '5.0', 'drone_widget_'.str_replace('-', '_', $this->_id).'_output filter'); call_user_func_array(self::$_on_output_html[$this->_id], array($this, &$output)); } echo $output->html(); } } namespace Drone\Widgets\Widget; use Drone\Widgets\Widget; use Drone\Func; use Drone\HTML; use Drone\Theme; class UnwrappedText extends Widget { protected function onSetupOptions(\Drone\Options\Group\Widget $options) { $options->addOption('text', 'title', '', __('Title', $this->_domain)); $options->addOption('code', 'text', '', __('Text', $this->_domain), '', array('on_html' => function($option, &$html) { $html->style('height: 25em;'); })); $options->addOption('boolean', 'shortcodes', false, '', '', array('caption' => __('Allow shortcodes', $this->_domain))); } protected function onWidget(array $args, \Drone\HTML &$html) { if ($this->wo('shortcodes')) { $html->add(do_shortcode($this->wo_('text')->__())); } else { $html->add($this->wo_('text')->__()); } } public function __construct() { parent::__construct(__('Unwrapped text', Theme::getInstance()->domain), __('For pure HTML code.', Theme::getInstance()->domain), '', 600); } } class Page extends Widget { protected function onSetupOptions(\Drone\Options\Group\Widget $options) { $options->addOption('text', 'title', '', __('Title', $this->_domain)); $options->addOption('select', 'page', 0, __('Page', $this->_domain), '', array('required' => false, 'options' => function() { return Func::wpPostsList(array('numberposts' => -1, 'post_type' => 'page')); })); } protected function onWidget(array $args, \Drone\HTML &$html) { if (($page = get_post((int)$this->wo('page'))) !== null) { if (function_exists('bbp_version') && is_bbpress()) { bbp_restore_all_filters('the_content'); } $html->add(Func::wpProcessContent($page->post_content)); } } public function __construct() { parent::__construct(__('Page', Theme::getInstance()->domain), __('Displays content of a specified page.', Theme::getInstance()->domain)); } } class PostsList extends Widget { public static $_on_post; protected function onSetupOptions(\Drone\Options\Group\Widget $options) { $options->addOption('text', 'title', '', __('Title', $this->_domain)); $options->addOption('select', 'category', 0, __('Category', $this->_domain), '', array('options' => array(0 => __('All', $this->_domain))+Func::wpTermsList('category') )); $options->addOption('select', 'orderby', 'date', __('Sort by', $this->_domain), '', array('options' => array( 'title' => __('Title', $this->_domain), 'date' => __('Date', $this->_domain), 'modified' => __('Modified date', $this->_domain), 'comment_count' => __('Comment count', $this->_domain), 'rand' => __('Random order', $this->_domain) ))); $options->addOption('select', 'order', 'desc', __('Sort order', $this->_domain), '', array('options' => array( 'asc' => __('Ascending', $this->_domain), 'desc' => __('Descending', $this->_domain) ))); $options->addOption('number', 'count', 5, __('Posts count', $this->_domain), '', array('min' => 1, 'max' => 50)); $options->addOption('number', 'limit', 10, __('Post title words limit', $this->_domain), '', array('min' => 1)); $options->addOption('boolean', 'author', false, '', '', array('caption' => __('Show post author', $this->_domain))); $options->addOption('boolean', 'comments', false, '', '', array('caption' => __('Show comments count', $this->_domain))); } protected function onWidget(array $args, \Drone\HTML &$html) { $posts = get_posts(array( 'category' => $this->wo('category'), 'numberposts' => $this->wo('count'), 'orderby' => $this->wo('orderby'), 'order' => strtoupper($this->wo('order')), 'exclude' => is_single() ? get_the_ID() : '' )); if (count($posts) == 0) { return; } $html = HTML::ul(); foreach ($posts as $post) { $li = HTML::li()->add( HTML::a() ->href(esc_url(\apply_filters('the_permalink', get_permalink($post->ID)))) ->title(esc_attr($post->post_title)) ->add(wp_trim_words($post->post_title, $this->wo('limit'))) ); if ($this->wo('author')) { $author = get_userdata($post->post_author); $li->add( '&nbsp;', sprintf(__('by %s', $this->_domain), HTML::a()->href(get_author_posts_url($post->post_author))->title(esc_attr($author->display_name))->add($author->display_name)->html()) ); } if ($this->wo('comments')) { $li->add(" ({$post->comment_count})"); } $li = \Drone\apply_filters('widget_'.str_replace('-', '_', $this->_id).'_post', $li, $this, $post); if (is_callable(self::$_on_post)) { _deprecated_function(__METHOD__.'::$_on_post', '5.0', 'drone_widget_'.str_replace('-', '_', $this->_id).'_post filter'); call_user_func_array(self::$_on_post, array($this, $post, &$li)); } $html->add($li); } } public function __construct() { parent::__construct(__('Posts list', Theme::getInstance()->domain), __('Displays list of posts by specific criteria (e.g.: newest posts, most commented, random posts, etc.).', Theme::getInstance()->domain)); } } class Twitter extends Widget { const TWEETS_BACKUP_INTERVAL = 604800; public static $_on_tweet; protected function onSetupOptions(\Drone\Options\Group\Widget $options) { $options->addOption('text', 'title', '', __('Title', $this->_domain)); $options->addOption('codeline', 'username', '', __('Username', $this->_domain), '', array( 'on_sanitize' => function($option, $original_value, &$value) { if (preg_match('|^((https?://)?(www\.)?twitter\.com/(#!/)?)?(?P<username>.+?)/?$|i', $value, $matches)) { $value = $matches['username']; } } )); $options->addOption('number', 'count', 5, __('Tweets count', $this->_domain), '', array('min' => 1, 'max' => 20)); $options->addOption('interval', 'interval', array('quantity' => 30, 'unit' => 'm'), __('Update interval', $this->_domain), __('Tweets receiving interval.', $this->_domain), array('min' => '1m')); $options->addOption('boolean', 'include_retweets', true, '', '', array('caption' => __('Include retweets', $this->_domain))); $options->addOption('boolean', 'exclude_replies', false, '', '', array('caption' => __('Exclude replies', $this->_domain))); $oauth = $options->addGroup('oauth'); $oauth->addOption('codeline', 'consumer_key', '', __('API key', $this->_domain)); $oauth->addOption('codeline', 'consumer_secret', '', __('API secret', $this->_domain), '', array('password' => true)); $oauth->addOption('codeline', 'access_token', '', __('Access token', $this->_domain)); $oauth->addOption('codeline', 'access_token_secret', '', __('Access token secret', $this->_domain), '', array('password' => true)); } protected function onWidget(array $args, \Drone\HTML &$html) { if (!$this->wo('username')) { return; } if (($tweets = get_transient($this->getTransientName('tweets'))) === false || get_transient($this->getTransientName('valid')) === false) { $new_tweets = Func::twitterGetTweets( $this->wo_('oauth')->toArray(), $this->wo('username'), $this->wo('include_retweets'), $this->wo('exclude_replies'), $this->wo('count') ); if ($new_tweets !== false) { $tweets = $new_tweets; $interval = $this->wo_('interval')->seconds(); set_transient($this->getTransientName('valid'), true, $interval); set_transient($this->getTransientName('tweets'), $tweets, $interval+self::TWEETS_BACKUP_INTERVAL); } else if ($tweets === false) { return; } } $html = HTML::ul(); foreach ($tweets as $tweet) { $li = HTML::li()->add( $tweet['html'], HTML::br(), HTML::small()->add( HTML::a() ->href($tweet['url']) ->add(sprintf(__('%s ago', $this->_domain), human_time_diff($tweet['date']))) ) ); $li = \Drone\apply_filters('widget_'.str_replace('-', '_', $this->_id).'_tweet', $li, $this, $tweet); if (is_callable(self::$_on_tweet)) { _deprecated_function(__METHOD__.'::$_on_tweet', '5.0', 'drone_widget_'.str_replace('-', '_', $this->_id).'_tweet filter'); call_user_func_array(self::$_on_tweet, array($this, $tweet, &$li)); } $html->add($li); } } public function __construct() { parent::__construct(__('Twitter', Theme::getInstance()->domain), __('Twitter stream.', Theme::getInstance()->domain)); } public function update($new_instance, $old_instance) { delete_transient($this->getTransientName('valid')); delete_transient($this->getTransientName('tweets')); return parent::update($new_instance, $old_instance); } } class Flickr extends Widget { public static $_on_photo; protected function onSetupOptions(\Drone\Options\Group\Widget $options) { $options->addOption('text', 'title', '', __('Title', $this->_domain)); $options->addOption('codeline', 'username', '', __('Username', $this->_domain), __('Screen name from Flickr account settings.', $this->_domain)); $options->addOption('number', 'count', 4, __('Photos count', $this->_domain), '', array('min' => 1, 'max' => 50)); $options->addOption('interval', 'interval', array('quantity' => 30, 'unit' => 'm'), __('Update interval', $this->_domain), __('Photos receiving interval.', $this->_domain), array('min' => '1m')); $options->addOption('select', 'url', 'image', 'Action after clickng on a photo', '', array('options' => array( 'flickr' => __('Open Flickr page with the photo', $this->_domain), 'image' => __('Open bigger version of the photo', $this->_domain) ))); $options->addOption('codeline', 'api_key', '', __('API Key', $this->_domain), __('Optional (use only if you want to use your key).', $this->_domain)); } protected function onWidget(array $args, \Drone\HTML &$html) { if (!$this->wo('username')) { return; } $transient = $this->getTransientName('photos'); if (($data = get_transient($transient)) === false) { $api_key = $this->wo('api_key'); if (empty($api_key)) { $api_key = Func::FLICKR_API_KEY; } if (($data['userdata'] = Func::flickrGetUserdata($api_key, $this->wo('username'))) === false) { return; } if (($data['photos'] = Func::flickrGetPhotos($api_key, $data['userdata']['id'], $this->wo('count'))) === false) { return; } set_transient($transient, $data, $this->wo_('interval')->seconds()); } $html = HTML::ul(); foreach ($data['photos'] as $photo) { $li = HTML::li(); $li->addNew('a') ->href($this->wo('url') == 'flickr' ? $photo['url'] : sprintf($photo['src'], 'b')) ->title($photo['title']) ->rel($this->id) ->addNew('img') ->src(sprintf($photo['src'], 's')) ->alt($photo['title']) ->width(75) ->height(75); $li = \Drone\apply_filters('widget_'.str_replace('-', '_', $this->_id).'_photo', $li, $this, $photo); if (is_callable(self::$_on_photo)) { _deprecated_function(__METHOD__.'::$_on_photo', '5.0', 'drone_widget_'.str_replace('-', '_', $this->_id).'_photo filter'); call_user_func_array(self::$_on_photo, array($this, $photo, &$li)); } $html->add($li); } } public function __construct() { parent::__construct(__('Flickr', Theme::getInstance()->domain), __('Flickr photo stream.', Theme::getInstance()->domain)); } public function update($new_instance, $old_instance) { delete_transient($this->getTransientName('photos')); return parent::update($new_instance, $old_instance); } } class FacebookLikeBox extends Widget { protected function onSetupOptions(\Drone\Options\Group\Widget $options) { $options->addOption('codeline', 'href', '', __('Facebook page URL', 'everything'), sprintf(__('E.g. %s', 'everything'), '<code>http://www.facebook.com/platform</code>')); $options->addOption('number', 'height', 320, __('Height', 'everything'), '', array('unit' => 'px', 'min' => 50, 'max' => 1000)); $options->addOption('boolean', 'header', true, '', '', array('caption' => __('Show header', 'everything'))); $options->addOption('boolean', 'stream', false, '', '', array('caption' => __('Show stream', 'everything'))); $options->addOption('boolean', 'show_faces', true, '', '', array('caption' => __('Show faces', 'everything'))); $options->addOption('boolean', 'border', true, '', '', array('caption' => __('Show border', 'everything'))); } protected function onWidget(array $args, \Drone\HTML &$html) { $html = \Drone\HTML::div() ->style("height: {$this->wo('height')}px;") ->add( $html = \Drone\HTML::div() ->class('fb-like-box') ->data('href', $this->wo('href')) ->data('height', $this->wo('height')) ->data('header', \Drone\Func::boolToString($this->wo('header'))) ->data('stream', \Drone\Func::boolToString($this->wo('stream'))) ->data('show-faces', \Drone\Func::boolToString($this->wo('show_faces'))) ->data('show-border', \Drone\Func::boolToString($this->wo('border'))) ); } public function __construct() { parent::__construct(__('Facebook Like Box', Theme::getInstance()->domain), __('Configurable Facebook widget.', Theme::getInstance()->domain)); } }