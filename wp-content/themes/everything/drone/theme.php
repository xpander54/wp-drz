<?php
 namespace Drone; class Theme { const UPDATE_URL = 'http://themes.kubasto.com/update/'; const UPDATE_INTERVAL = 36; const UPDATE_INTERVAL_JITTER = 6; const ACTIVATION_TIME_ILLEGAL_SHIFT = 30; const WP_FUNCTIONS_FILENAME = 'functions.php'; const WP_LANGUAGES_DIRECTORY = 'languages'; const WP_THEME_OPTIONS_URI = 'options.php'; const WP_AJAX_URI = 'admin-ajax.php'; const WP_FILTER_PRIORITY_DEFAULT = 10; const WP_TRANSIENT_NAME_MAX_LENGTH = 45; const ENVATO_HELP_PURCHASE_CODE_URL = 'https://help.market.envato.com/hc/en-us/articles/202822600-Where-can-I-find-my-Purchase-Code'; const ENVATO_PROFILE_URL = 'http://themeforest.net/user/kubasto/?ref=kubasto'; const WPML_REFERRAL_URL = 'https://wpml.org/?aid=25858&affiliate_key=H0NWEUimxymp'; private static $instance = null; private static $setup_options_lock = false; private $start_time; private $marker_time = array(); private $debug_log = array(); private $theme_options_array; private $theme_options; private $post_options = array(); private $sysinfo; private $plugin_page = false; private $features = array(); private $styles; private $scripts; private $debug_mode; private $class; private $theme; private $parent_theme; private $domain; private $stylesheet_dir; private $stylesheet_uri; private $template_dir; private $template_uri; private $drone_dir; private $drone_uri; protected function onLoad() { } protected function onSetupOptions(\Drone\Options\Group\Theme $theme_options) { } public function onThemeOptionsCompatybility(array &$data, $version) { } public function onPostOptionsCompatybility(array &$data, $version, $post_type) { } protected function onSetupTheme() { } protected function onInit() { } protected function onWidgetsInit() { } protected function onSavePost($post_id, $post_type) { } private function getDocComments($filename, $scope = array(T_PRIVATE, T_PROTECTED, T_PUBLIC, T_ABSTRACT)) { if (!file_exists($filename)) { return false; } if (($file = @file_get_contents($filename)) === false) { return false; } $scope = (array)$scope; $tokens = token_get_all($file); $tokens_count = count($tokens); $doccomments = array(); for ($i = 0; $i < $tokens_count; $i++) { if ( isset($tokens[$i+0][0]) && $tokens[$i+0][0] == T_DOC_COMMENT && isset($tokens[$i+1][0]) && $tokens[$i+1][0] == T_WHITESPACE && isset($tokens[$i+2][0]) && in_array($tokens[$i+2][0], $scope) && isset($tokens[$i+3][0]) && $tokens[$i+3][0] == T_WHITESPACE && isset($tokens[$i+4][0]) && $tokens[$i+4][0] == T_FUNCTION && isset($tokens[$i+5][0]) && $tokens[$i+5][0] == T_WHITESPACE && isset($tokens[$i+6][0]) && $tokens[$i+6][0] == T_STRING && isset($tokens[$i+0][1]) && isset($tokens[$i+6][1]) ) { $doccomments[$tokens[$i+6][1]] = $tokens[$i+0][1]; } } return $doccomments; } private function includeFile($filename) { if (file_exists($path = $this->template_dir.'/inc/'.$filename) || file_exists($path = $this->template_dir.'/'.$filename)) { include_once $path; return true; } return false; } private function getUpdateURL($action, $ticket = '') { $params = array( $action, VERSION, $this->base_theme->id, $this->base_theme->version ? $this->base_theme->version : '1', $this->sysinfo->value('purchase_code') ); if ($action == 'download' && $params[4]) { $params[] = $ticket; } return apply_filters('update_url', self::UPDATE_URL).rtrim(implode('/', $params), '/ '); } protected function __construct() { $this->start_time = microtime(true); $this->beginMarker(__METHOD__); $this->class = get_class($this); $this->theme = wp_get_theme(); $this->theme->id = Func::stringID($this->theme->name); if (($parent = $this->theme->parent()) !== false) { $this->parent_theme = $parent; $this->parent_theme->id = Func::stringID($parent->name); } $this->stylesheet_dir = get_stylesheet_directory(); $this->stylesheet_uri = get_stylesheet_directory_uri(); $this->template_dir = get_template_directory(); $this->template_uri = get_template_directory_uri(); $this->drone_dir = $this->template_dir.'/'.DIRECTORY; $this->drone_uri = $this->template_uri.'/'.DIRECTORY; add_action('after_setup_theme', array($this, '__actionAfterSetupTheme')); add_action('init', array($this, '__actionInit')); add_action('after_switch_theme', array($this, '__actionAfterSwitchTheme')); $this->endMarker(__METHOD__); } public function __get($name) { switch ($name) { case 'base_theme': return $this->parent_theme === null ? $this->theme : $this->parent_theme; case 'version': return $this->parent_theme === null ? $this->theme->version : rtrim($this->parent_theme->version.'-child-'.$this->theme->version, '-'); case 'wp_version': return get_bloginfo('version'); case 'debug_mode': case 'class': case 'theme': case 'parent_theme': case 'domain': case 'stylesheet_dir': case 'stylesheet_uri': case 'template_dir': case 'template_uri': case 'drone_dir': case 'drone_uri': return $this->{$name}; } } public function __actionAfterSetupTheme() { $this->beginMarker(__METHOD__); $this->domain = $this->base_theme->id; load_theme_textdomain($this->domain, $this->template_dir.'/'.self::WP_LANGUAGES_DIRECTORY); $this->beginMarker($this->class.'::onLoad'); $this->onLoad(); $this->endMarker($this->class.'::onLoad'); $this->theme_options = new Options\Group\Theme($this->theme->id); $this->theme_options_array = get_option($this->theme->id, array()); if (is_admin() && current_user_can('edit_theme_options')) { if (isset($_POST['settings-export'])) { $settings = $this->theme_options_array; unset($settings[Options\Group\Sysinfo::SLUG]); $filename = Func::stringID(sprintf(__('%s theme options settings', $this->domain), $this->theme->name), '.').'.'.date('Y-m-d').'.json'; header('Content-Type: application/force-download; charset='.get_option('blog_charset')); header('Content-Disposition: attachment; filename="'.$filename.'"'); exit(base64_encode(json_encode($settings))); } else if (isset($_POST['settings-import'])) { if (!is_uploaded_file($filename = $_FILES['settings-import-file']['tmp_name'])) { header('Location: '.$_SERVER['REQUEST_URI'].'&settings-import=no-file'); die; } $file = base64_decode(@file_get_contents($filename)); switch (strtolower(pathinfo($_FILES['settings-import-file']['name'], PATHINFO_EXTENSION))) { case 'txt': $settings = unserialize($file); break; default: $settings = json_decode($file, true); break; } if (!isset($settings[Options\Group\Theme::VERSION_KEY]) || version_compare($settings[Options\Group\Theme::VERSION_KEY], $this->base_theme->version) > 0) { header('Location: '.$_SERVER['REQUEST_URI'].'&settings-import=wrong-version'); die; } update_option($this->theme->id, $settings); header('Location: '.$_SERVER['REQUEST_URI'].'&settings-import=success'); die; } } if (extension_loaded('eAccelerator')) { $doccomments = $this->getDocComments($this->template_dir.'/'.self::WP_FUNCTIONS_FILENAME, T_PUBLIC); } $rc = new \ReflectionClass($this->class); foreach ($rc->getMethods(\ReflectionMethod::IS_PUBLIC) as $method) { if ($method->class != $this->class) { continue; } if (isset($doccomments[$method->name])) { $phpdoc = $doccomments[$method->name]; } else if (($phpdoc = $method->getDocComment()) === false) { continue; } if (!preg_match_all('/@internal (?P<type>action|filter|shortcode):(?P<data>.+)$/im', $phpdoc, $phpdoc_matches, PREG_SET_ORDER)) { continue; } foreach ($phpdoc_matches as $phpdoc_match) { $phpdoc_data = array_map('trim', explode(',', $phpdoc_match['data'])); if (empty($phpdoc_data[0])) { continue; } switch (strtolower($phpdoc_match['type'])) { case 'action': case 'filter': add_filter( $phpdoc_data[0], array($this, $method->name), isset($phpdoc_data[1]) ? (int)$phpdoc_data[1] : self::WP_FILTER_PRIORITY_DEFAULT, isset($phpdoc_data[2]) ? (int)$phpdoc_data[2] : $method->getNumberOfParameters() ); break; case 'shortcode': add_shortcode($phpdoc_data[0], array($this, $method->name)); break; } } } if ($this->includeFile(Shortcodes\INC_FILENAME)) { foreach (get_declared_classes() as $class) { if (strpos($class, $this->class.'\Shortcodes\Shortcode\\') === 0) { new $class(); } } add_filter('the_content', array($this, '__filterShortcodeParent'), 1); } $this->includeFile(Options\INC_FILENAME); $this->beginMarker($this->class.'::onSetupOptions'); self::$setup_options_lock = true; $this->onSetupOptions($this->theme_options); $this->theme_options->addChild($this->sysinfo = new Options\Group\Sysinfo()); self::$setup_options_lock = false; $this->endMarker($this->class.'::onSetupOptions'); $this->beginMarker(get_class($this->theme_options).'::fromArray'); $this->theme_options->fromArray($this->theme_options_array, array($this, 'onThemeOptionsCompatybility')); $this->endMarker(get_class($this->theme_options).'::fromArray'); $this->debug_mode = $this->sysinfo->value('debug_mode'); add_theme_support('automatic-feed-links'); $this->beginMarker($this->class.'::onSetupTheme'); $this->onSetupTheme(); $this->endMarker($this->class.'::onSetupTheme'); add_action('widgets_init', array($this, '__actionWidgetsInit')); add_action('wp_enqueue_scripts', array($this, '__actionWPEnqueueScripts')); add_action('wp_head', array($this, '__actionWPHead')); add_action('wp_footer', array($this, '__actionWPFooter'), 100); add_action('wp_footer', array($this, '__actionDebugFooter'), 1000); add_action('admin_menu', array($this, '__actionAdminMenu')); add_action('wp_enqueue_scripts', array('\Drone\Options\Option\Font', '__actionWPEnqueueScripts'), 5); if (!isset($this->features['shortcodes']) && self::isPluginActive('visual-composer')) { add_action('vc_before_init', array('\Drone\Shortcodes\Shortcode', '__actionVCBeforeInit')); } add_filter('body_class', array($this, '__filterBodyClass')); $this->endMarker(__METHOD__); } public function __actionWidgetsInit() { $this->beginMarker(__METHOD__); if ($this->includeFile(Widgets\INC_FILENAME)) { foreach (get_declared_classes() as $class) { if (strpos($class, $this->class.'\Widgets\Widget\\') === 0) { register_widget('\\'.$class); } } } $this->beginMarker($this->class.'::onWidgetsInit'); $this->onWidgetsInit(); $this->endMarker($this->class.'::onWidgetsInit'); $this->endMarker(__METHOD__); } public function __actionInit() { $this->beginMarker(__METHOD__); $this->beginMarker($this->class.'::onInit'); $this->onInit(); $this->endMarker($this->class.'::onInit'); $this->endMarker(__METHOD__); } public function __actionAfterSwitchTheme() { flush_rewrite_rules(); } public function __actionAdminMenu() { $this->beginMarker(__METHOD__); $this->plugin_page = isset($GLOBALS['plugin_page']) && strpos($GLOBALS['plugin_page'], $this->theme->id) === 0 ? substr($GLOBALS['plugin_page'], strlen($this->theme->id)+1) : false; wp_register_style($this->theme->id.'-options', $this->drone_uri.'/css/options.css', array(), VERSION); wp_register_style($this->theme->id.'-shortcode-options', $this->drone_uri.'/css/shortcode-options/styles.css', array(), VERSION); wp_register_script($this->theme->id.'-jscolor', $this->drone_uri.'/ext/jscolor/jscolor.js', array(), '1.4.2'); wp_register_script($this->theme->id.'-options', $this->drone_uri.'/js/options.js', array('jquery', 'jquery-ui-sortable', $this->theme->id.'-jscolor', 'media-upload'), VERSION); wp_register_script($this->theme->id.'-update-core', $this->drone_uri.'/js/update-core.js', array('jquery'), VERSION); add_action('admin_notices', array($this, '__actionAdminNotices')); add_action('add_meta_boxes', array($this, '__actionAddMetaBoxes')); add_action('save_post', array($this, '__actionSavePost')); add_action('print_media_templates', array($this, '__actionPrintMediaTemplates')); add_action('admin_footer', array($this, '__actionDebugFooter'), 1000); add_action('admin_enqueue_scripts', array($this, '__actionAdminEnqueueScripts')); add_action('admin_print_styles', array($this, '__actionAdminPrintStyles')); add_action('admin_print_scripts', array($this, '__actionAdminPrintScripts')); if ($this->theme_options->count() > 0) { $theme_options_childs = array_filter($this->theme_options->childs(), function($child) { return $child->isIncluded(); }); $theme_options_keys = array_keys($theme_options_childs); $menu_slug = $this->theme->id.'-'.$theme_options_keys[0]; $label = __('Theme Options', $this->domain); if (($errors = $this->theme_options->errorsCount()) > 0) { $label .= sprintf(' <span class="update-plugins count-%1$d" title="%2$s"><span class="update-count">%1$d</span></span>', $errors, ''); } add_menu_page( sprintf(__('%s options', $this->domain), $this->theme->name), $label, 'edit_theme_options', $menu_slug, null, 'dashicons-screenoptions' ); foreach ($theme_options_childs as $name => $child) { $label = $child->label; if (($errors = $child->errorsCount()) > 0) { $label .= sprintf(' <span class="update-plugins count-%1$d" title="%2$s"><span class="update-count">%1$d</span></span>', $errors, ''); } $hook_suffix = add_submenu_page( $menu_slug, sprintf(__('%s options', $this->domain), $child->label), $label, 'edit_theme_options', $this->theme->id.'-'.$name, array($this, '__callbackThemeOptions') ); add_action('admin_print_styles-'.$hook_suffix, array($this, '__actionAdminPrintStylesOptions')); add_action('admin_print_scripts-'.$hook_suffix, array($this, '__actionAdminPrintScriptsOptions')); add_action('admin_head-'.$hook_suffix, array($this, '__actionAdminHeadThemeOptions')); } } add_action('admin_print_styles-post.php', array($this, '__actionAdminPrintStylesOptions')); add_action('admin_print_styles-post-new.php', array($this, '__actionAdminPrintStylesOptions')); add_action('admin_print_scripts-post.php', array($this, '__actionAdminPrintScriptsOptions')); add_action('admin_print_scripts-post-new.php', array($this, '__actionAdminPrintScriptsOptions')); add_action('admin_head-post.php', array($this, '__actionAdminHeadPostOptions')); add_action('admin_head-post-new.php', array($this, '__actionAdminHeadPostOptions')); add_action('admin_print_styles-widgets.php', array($this, '__actionAdminPrintStylesOptions')); add_action('admin_print_scripts-widgets.php', array($this, '__actionAdminPrintScriptsOptions')); add_action('admin_head-widgets.php', array($this, '__actionAdminHeadWidgetOptions')); if ((get_user_option('rich_editing') == 'true') && (current_user_can('edit_posts') || current_user_can('edit_pages'))) { add_action('before_wp_tiny_mce', array('\Drone\Shortcodes\Shortcode', '__actionBeforeWPTinyMCE')); add_filter('tiny_mce_before_init', array('\Drone\Shortcodes\Shortcode', '__filterTinyMCEBeforeInit')); add_filter('mce_external_plugins', array($this, '__filterMCEExternalPlugins')); add_filter('mce_external_languages', array($this, '__filterMCEExternalLanguages')); add_filter('mce_css', array($this, '__filterMCECSS')); add_filter('mce_buttons', array($this, '__filterMCEButtons')); } add_filter('http_headers_useragent', array($this, '__filterHTTPHeadersUseragent')); if (apply_filters('enable_update', true)) { add_action('admin_print_scripts-update-core.php', array($this, '__actionAdminPrintScriptsUpdateCore')); add_filter('pre_set_site_transient_update_themes', array($this, '__filterPreSetSiteTransientUpdateThemes')); } if (isset($_GET['settings-import'])) { switch ($_GET['settings-import']) { case 'success': add_settings_error('general', 'settings_import_fail', __('Theme Options imported successfully.', $this->domain), 'updated'); break; case 'no-file': add_settings_error('general', 'settings_import_fail', __('No file was selected for import.', $this->domain), 'error'); break; case 'wrong-version': add_settings_error('general', 'settings_import_fail', __('Mismatched version number of the theme.', $this->domain), 'error'); break; default: add_settings_error('general', 'settings_import_fail', __('File could not be imported.', $this->domain), 'error'); break; } } register_setting($this->theme->id, $this->theme->id, array($this, '__callbackThemeOptionsSanitize')); $this->endMarker(__METHOD__); } public function __actionAdminNotices() { if ($this->isIllegal()) { echo HTML::div()->class('error')->add( HTML::p()->add( __('Your theme comes from unauthorized source and might include viruses or malicious code.', $this->domain), HTML::br(), sprintf(__('Use official theme version which you can <a href="%s">purchase on ThemeForest.net</a> only.', $this->domain), self::ENVATO_PROFILE_URL) ) )->html(); } } public function __actionAdminEnqueueScripts($hook) { wp_enqueue_style($this->theme->id.'-shortcode-options'); } public function __actionAdminPrintStyles() { } public function __actionAdminPrintScripts() { if (isset($this->features['shortcodes'])) { echo '<script>'.sprintf('drone_shortcodes = %s;', Func::minify('js', json_encode($this->features['shortcodes'])))."</script>\n"; } } public function __actionAdminPrintStylesOptions() { wp_enqueue_style($this->theme->id.'-options'); wp_enqueue_style('dashicons'); } public function __actionAdminPrintScriptsOptions() { wp_enqueue_media(); wp_enqueue_script($this->theme->id.'-options'); } public function __actionAdminPrintScriptsUpdateCore() { if ($this->sysinfo->child('purchase_code')->isError()) { wp_enqueue_script($this->theme->id.'-update-core'); wp_localize_script($this->theme->id.'-update-core', 'drone_update_core', array( 'template' => get_option('template'), 'notice' => sprintf( __('To enable this update please paste your <a href="%1$s">purchase code</a> in <a href="%2$s">Theme Options / System</a>.', $this->domain), self::ENVATO_HELP_PURCHASE_CODE_URL, menu_page_url($this->theme->id.'-'.Options\Group\Sysinfo::SLUG, false) ) )); } } public function __actionAdminHeadThemeOptions() { if (method_exists($this, 'onThemeOptions') && ($group = $this->theme_options->child($page = $this->plugin_page)) !== null) { _deprecated_function(__METHOD__, '5.0', 'lambda function as options'); $this->onThemeOptions($page, $group); } if (($group = $this->theme_options->child($this->plugin_page)) !== null) { if ($styles = $group->styles()) { echo "<style>{$styles}</style>\n"; } } if (($group = $this->theme_options->child($this->plugin_page)) !== null) { if ($scripts = $group->scripts()) { echo "<script>{$scripts}</script>\n"; } } } public function __actionAdminHeadPostOptions() { $post_id = (int)get_the_ID(); $post_options = $this->getPostOptions($post_id); if (method_exists($this, 'onPostOptions')) { _deprecated_function(__METHOD__, '5.0', 'lambda function as options'); $this->onPostOptions($post_options, $post_id, get_post_type($post_id)); } $styles = $post_options->styles(); foreach (Shortcodes\Shortcode::getInstances() as $shortcode) { if ($shortcode->visibility) { $styles .= $shortcode->options->styles(); } } if ($styles) { echo "<style>{$styles}</style>\n"; } if ($scripts = $post_options->scripts()) { echo "<script>{$scripts}</script>\n"; } } public function __actionAdminHeadWidgetOptions() { if (method_exists($this, 'onWidgetOptions')) { _deprecated_function(__METHOD__, '5.0', 'lambda function as options'); $this->onWidgetOptions(); } } public function __actionAddMetaBoxes() { foreach ($this->post_options as $post_type => $post_options) { foreach ($post_options->childs('group') as $group) { add_meta_box( Func::stringID($group->name), $group->label, function($object, $box) { $group = $box['args']['group']; require Theme::getInstance()->drone_dir.'/tpl/post-options.php'; }, $post_type, $group->context, $group->priority, array('group' => $group) ); } } } public function __actionPrintMediaTemplates() { if (($gallery = Shortcodes\Shortcode::getInstance('gallery')) === null || $gallery->options->count() == 0) { return; } $options = $gallery->options; $defaults = $gallery->options->getDefaults(); unset( $defaults['order'], $defaults['orderby'], $defaults['id'], $defaults['columns'], $defaults['size'], $defaults['ids'], $defaults['include'], $defaults['exclude'], $defaults['link'] ); require $this->drone_dir.'/tpl/gallery-options.php'; } public function __actionSavePost($post_id) { if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) { return; } if (!current_user_can('edit_post', $post_id)) { return; } $post_type = get_post_type($post_id); $this->beginMarker($this->class.'::onSavePost'); $this->onSavePost($post_id, $post_type); $this->endMarker($this->class.'::onSavePost'); if (isset($_POST[$this->theme->id])) { $post_options = $this->getPostOptions((int)$post_id); foreach ($post_options->childs('group') as $child) { $noncename = $child->attr_name.'_wpnonce'; if (!isset($_POST[$noncename]) || !wp_verify_nonce($_POST[$noncename], $child->attr_name)) { return; } } $post_options->change($_POST[$this->theme->id]); update_post_meta($post_id, '_'.$this->theme->id, $post_options->toArray()); } } public function __actionWPHead() { $this->beginMarker(__METHOD__); if ($this->styles) { echo '<style>'.Func::minify('css', implode('', $this->styles), $this->getTransientName('styles_scripts'))."</style>\n"; } $scripts = ''; if (isset($this->scripts['header']['js']) && $this->scripts['header']['js']) { $scripts .= implode('', $this->scripts['header']['js']); } if (isset($this->scripts['header']['jquery']) && $this->scripts['header']['jquery']) { $scripts .= '(function($) { $(document).ready(function($) { '.implode('', $this->scripts['header']['jquery']).' }); })(jQuery);'; } if ($scripts) { echo '<script>'.Func::minify('js', $scripts, $this->getTransientName('styles_scripts'))."</script>\n"; } $this->endMarker(__METHOD__); } public function __actionWPFooter() { $this->beginMarker(__METHOD__); $scripts = ''; if (isset($this->scripts['footer']['js']) && $this->scripts['header']['js']) { $scripts .= implode('', $this->scripts['footer']['js']); } if (isset($this->scripts['footer']['jquery']) && $this->scripts['header']['jquery']) { $scripts .= '(function($) { $(document).ready(function($) { '.implode('', $this->scripts['footer']['jquery']).' }); })(jQuery);'; } if ($scripts) { echo '<script>'.Func::minify('js', $scripts, $this->getTransientName('styles_scripts'))."</script>\n"; } $this->endMarker(__METHOD__); } public function __actionWPEnqueueScripts() { if (!empty($this->scripts['header']['jquery']) || !empty($this->scripts['footer']['jquery'])) { wp_enqueue_script('jquery'); } } public function __actionDebugFooter() { if ($this->debug_mode) { usort($this->debug_log, function($a, $b) { return round($a['start_time']*1000+$a['nest'] - ($b['start_time']*1000+$b['nest'])); }); echo "\n<!--\n"; require $this->drone_dir.'/odd/signature.php'; foreach ($this->debug_log as $entry) { printf( "\t| %4dms | %5.2fmb | %-48s | %3dms | %5.2fmb |\n", ($entry['start_time']-$this->start_time)*1000, $entry['start_memory'] / (1024*1024), str_repeat('+ ', $entry['nest']).$entry['name'], ($entry['end_time']-$entry['start_time'])*1000, ($entry['end_memory'] - $entry['start_memory']) / (1024*1024) ); } echo "-->\n"; } } public function __actionOGP() { if (!isset($this->features['ogp'])) { return; } $options = $this->theme_options->child(array($this->features['ogp']['group'], $this->features['ogp']['name'])); if (!$options->value('enabled')) { return; } $this->beginMarker(__METHOD__); $ogp['site_name'] = get_bloginfo('name'); $title = trim(wp_title('', false)) or $title = $ogp['site_name']; $ogp['title'] = $title; $ogp['locale'] = str_replace('-', '_', get_bloginfo('language')); if (is_singular() && !is_front_page()) { $post = get_post($GLOBALS['post']->ID); $ogp['url'] = esc_url(\apply_filters('the_permalink', get_permalink($post->ID))); $description = $post->post_excerpt ? $post->post_excerpt : preg_replace('/\[\/?.+?\]/', '', $post->post_content); $description = preg_replace('/<(style|script).*>.*<\/\1>/isU', '', $description); $description = trim(strip_tags(preg_replace('/\s+/', ' ', $description))); $description = Func::stringCut($description, 250, ' [...]'); $ogp['description'] = $description; if (has_post_thumbnail($post->ID) && ($img = wp_get_attachment_image_src(get_post_thumbnail_id($post->ID), 'large')) !== false) { $ogp['image'] = $img[0]; } else if (preg_match('/<img[^>]* src=[\'"]([^\'"]+)[\'"]/i', $post->post_content, $img)) { $ogp['image'] = $img[1]; } } else { $ogp['url'] = home_url(); $ogp['description'] = get_bloginfo('description'); } if (!isset($ogp['image'])) { $ogp['image'] = $options->value('image'); } $output = HTML::make(); foreach ($ogp as $property => $content) { if ($content) { $output->addNew('meta')->property('og:'.$property)->content(esc_attr($content)); } } echo $output->html(); $this->endMarker(__METHOD__); } public function __actionWPAjaxContactForm() { if (!isset($this->features['contact-form'])) { exit; } $contact_form = $this->features['contact-form']; $options = $this->theme_options->child(array($contact_form['group'], $contact_form['name'])); $output = function($result, $message) use ($contact_form) { echo json_encode(array( $contact_form['result_var'] => $result, $contact_form['message_var'] => $message )); exit; }; $values = array(); foreach ($options->value('fields') as $field) { $value = isset($_POST[$field]) ? trim(strip_tags($_POST[$field])) : ''; switch ($field) { case 'name': if (empty($value)) { $output(false, __('Please enter your name.', $this->domain)); } break; case 'email': if (!preg_match('/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)+$/i', $value)) { $output(false, __('Invalid email address.', $this->domain)); } break; case 'website': if (!empty($value) && !preg_match('|^(https?://)?(www\.)?([-_a-z0-9]+\.)+[-_a-z0-9]+$|i', $value)) { $output(false, __('Invalid website address.', $this->domain)); } break; case 'phone': if (!empty($value) && !preg_match('/^[-_#\+\*\(\)0-9 ]+$/', $value)) { $output(false, __('Invalid phone number.', $this->domain)); } break; case 'message': if (strlen($value) < 3) { $output(false, __('Please write your message.', $this->domain)); } break; case 'captcha': if (function_exists('cptch_check_custom_form') && !cptch_check_custom_form()) { $output(false, __('Please complete the captcha.', $this->domain)); } break; } $values[$field] = $value; } $to = $options->value('to'); switch ($options->value('from')) { case 'to': $from = $to; break; case 'field': $from = $values['email']; break; default: $from = get_option('admin_email'); } $reply_to = $values['email']; $author = isset($values['name']) ? $values['name'] : ''; $subject = $options->value('subject'); $subject = str_replace(array('%blogname%', '%blogurl%'), array(get_bloginfo('name'), home_url()), $subject); $subject = preg_replace_callback('/%([a-z]+)%/i', function($m) use ($values) { return isset($values[$m[1]]) ? $values[$m[1]] : ''; }, $subject); $subject = wp_specialchars_decode(trim(str_replace(array("\r", "\n"), ' ', $subject))); $message = "{$values['message']}\r\n\r\n---\r\n". implode("\r\n", array_intersect_key( $values, array_flip(array_intersect($options->value('fields'), array('name', 'email', 'website', 'phone'))) )); if ($options->child('settings')->value('akismet') && function_exists('akismet_get_key') && akismet_get_key()) { $comment = array( 'blog' => home_url(), 'blog_lang' => get_locale(), 'blog_charset' => get_option('blog_charset'), 'user_ip' => $_SERVER['REMOTE_ADDR'], 'user_agent' => $_SERVER['HTTP_USER_AGENT'], 'referrer' => $_SERVER['HTTP_REFERER'], 'comment_type' => 'contactform' ); if (isset($values['name'])) { $comment['comment_author'] = $values['name']; } if (isset($values['email'])) { $comment['comment_author_email'] = $values['email']; } if (isset($values['comment_author_url'])) { $comment['comment_author_email'] = $values['website']; } if (isset($values['message'])) { $comment['comment_content'] = $values['message']; } foreach ($_SERVER as $key => $value) { if (!in_array($key, array('HTTP_COOKIE', 'HTTP_COOKIE2', 'PHP_AUTH_PW')) && is_string($value)) { $comment[$key] = $value; } else { $comment[$key] = ''; } } $query_string = Func::arraySerialize(array_map('stripslashes', $comment)); $response = akismet_http_post($query_string, $GLOBALS['akismet_api_host'], '/1.1/comment-check', $GLOBALS['akismet_api_port']); if ($response[1] == 'true') { $output(false, __('Your message is recognized as spam.', $this->domain)); } } $result = @wp_mail( $to, $subject, $message, ($options->child('settings')->value('from_header') ? "From: \"{$author}\" <{$from}>\r\n" : ''). "Reply-to: {$reply_to}\r\n". "Content-type: text/plain; charset=\"".get_bloginfo('charset')."\"\r\n" ); if ($result) { $output(true, __('Message sent.', $this->domain)); } else { $output(false, __("Error occured. Message couldn't be sent.", $this->domain)); } } public function __filterBodyClass($classes) { array_unshift($classes, $this->theme->id.'-'.($this->version ? str_replace('.', '-', $this->version) : 'unknown')); if ($this->debug_mode) { $classes[] = 'debug-mode'; } return $classes; } public function __filterForceImgCaptionShortcodeFilter($content) { return preg_replace_callback( '#(?P<caption>\[caption[^\]]*\])?(?:<p[^>]*>)?(?P<content>(?:<a [^>]+>)?<img [^>]+>(?:</a>)?)(?:</p>)?#i', array($this, '__filterForceImgCaptionShortcodeFilterCallback'), $content ); } protected function __filterForceImgCaptionShortcodeFilterCallback($matches) { if ($matches['caption']) { return $matches[0]; } $attr = array( 'id' => '', 'align' => 'alignnone', 'width' => '', 'caption' => '' ); $content = trim($matches['content']); if (preg_match('/class="([^"]*)"/i', $content, $m)) { list($class_attr, $class) = $m; if (preg_match('/\bwp-image-([0-9]+)\b/i', $class, $m)) { $attr['id'] = 'attachment_'.$m[1]; } if (preg_match('/\b(align(?:none|left|right|center))\b/i', $class, $m)) { $attr['align'] = strtolower($m[1]); $content = str_replace($class_attr, preg_replace('/\b'.$attr['align'].'\b/i', '', $class_attr), $content); } } if (preg_match('/width="([0-9]+)"/i', $content, $m)) { $attr['width'] = $m[1]; } $output = \apply_filters('img_caption_shortcode', '', $attr, $content); return $output != '' ? $output : $matches[0]; } public function __filterShortcodeParent($content) { $this->beginMarker(__METHOD__); foreach (Shortcodes\Shortcode::getInstances() as $shortcode) { if ($shortcode->parent === null || stripos($content, "[/{$shortcode->tag}]") === false) { continue; } $split_preg = '\['.$shortcode->parent->tag.'(?: [^\]]*)?\].*?\[/'.$shortcode->parent->tag.'\]'; $content_parts = preg_split('#('.$split_preg.')#is', $content, -1, PREG_SPLIT_DELIM_CAPTURE); foreach ($content_parts as &$content_part) { if (preg_match('#^'.$split_preg.'$#is', $content_part)) { continue; } $content_part = preg_replace_callback( '#(\s*\['.$shortcode->tag.'( [^\]]*)?\].*?\[/'.$shortcode->tag.'\]\s*)+#is', function($m) use ($shortcode) { return preg_replace('/^(\s*)(.*?)(\s*)$/s', "\\1[{$shortcode->parent->tag}]\n\n\\2\n\n[/{$shortcode->parent->tag}]\\3", $m[0]); }, $content_part ); } unset($content_part); $content = implode('', $content_parts); } $this->endMarker(__METHOD__); return $content; } public function __filterHTTPHeadersUseragent($user_agent) { return sprintf('WordPress/%s; PHP/%s; %s', $this->wp_version, PHP_VERSION, home_url()); } public function __filterPreSetSiteTransientUpdateThemes($transient) { if (empty($transient->checked)) { return $transient; } if ( ($update = wp_cache_get('update', $this->base_theme->id)) === false && (($update = get_transient($this->getTransientName('update', 'base_theme'))) === false || apply_filters('force_update_check', false)) ) { $update_response = wp_remote_get($this->getUpdateURL('info')); if (!is_wp_error($update_response) && $update_response['response']['code'] == 200 && !empty($update_response['body'])) { $update = json_decode($update_response['body']); } else { $update = ''; } $expire = Func::intRandJitter(self::UPDATE_INTERVAL, self::UPDATE_INTERVAL_JITTER)*3600; wp_cache_set('update', $update, $this->base_theme->id, $expire); set_transient($this->getTransientName('update', 'base_theme'), $update, $expire); } if (is_object($update) && isset($update->version, $update->url, $update->ticket) && version_compare($update->version, $this->base_theme->version) > 0) { $transient->response[get_option('template')] = array( 'new_version' => $update->version, 'url' => $update->url, 'package' => $update->ticket ? $this->getUpdateURL('download', $update->ticket) : '' ); } return $transient; } public function __filterMCEExternalPlugins($plugin_array) { if (isset($this->features['shortcodes'])) { $plugin_array['droneshortcodes'] = $this->drone_uri.'/js/shortcodes.js'; } else if (count(Shortcodes\Shortcode::getInstances()) > 0) { $plugin_array['drone_shortcode_options'] = $this->drone_uri.'/js/shortcode-options.js'; } return $plugin_array; } public function __filterMCEExternalLanguages($languages_array) { if (isset($this->features['shortcodes'])) { $languages_array[] = $this->drone_dir.'/odd/shortcodes.php'; } else if (count(Shortcodes\Shortcode::getInstances()) > 0) { $languages_array[] = $this->drone_dir.'/odd/shortcode-options.php'; } return $languages_array; } public function __filterMCECSS($css) { return ltrim($css.','.$this->drone_uri.'/css/shortcode-options.css', ','); } public function __filterMCEButtons($buttons) { if (isset($this->features['shortcodes'])) { array_splice($buttons, array_search('wp_more', $buttons)+1, 0, 'drone-shortcodes'); } else if (count(Shortcodes\Shortcode::getInstances()) > 0) { array_splice($buttons, array_search('wp_more', $buttons)+1, 0, 'drone_shortcode_options'); } return $buttons; } public function __callbackThemeOptions() { if (($group = $this->theme_options->child($this->plugin_page)) !== null) { require $this->drone_dir.'/tpl/theme-options.php'; } } public function __callbackThemeOptionsSanitize($data) { $this->theme_options->change($data); return $this->theme_options->toArray(); } protected function beginMarker($name) { if ($this->debug_mode !== false) { unset($this->marker_time[$name]); $this->marker_time[$name] = array( 'time' => microtime(true), 'memory' => memory_get_usage() ); } } protected function endMarker($name) { if ($this->debug_mode !== false && isset($this->marker_time[$name])) { $this->debug_log[] = array( 'name' => $name, 'start_time' => $this->marker_time[$name]['time'], 'end_time' => microtime(true), 'start_memory' => $this->marker_time[$name]['memory'], 'end_memory' => memory_get_usage(), 'nest' => count($this->marker_time)-1, ); unset($this->marker_time[$name]); } } protected function getPostOptions($post_id_type = 'post') { $post_id = is_int($post_id_type) ? $post_id_type : null; $post_type = is_null($post_id) ? $post_id_type : get_post_type($post_id); if (!isset($this->post_options[$post_type])) { $this->post_options[$post_type] = new Options\Group\Post($this->theme->id); } static $last_post_id = null; if ($post_id !== null && $post_id !== $last_post_id) { $post_data = get_post_meta($post_id, '_'.$this->theme->id, true); $this->beginMarker($this->class.'::onPostOptionsCompatybility'); $this->post_options[$post_type]->fromArray($post_data, array($this, 'onPostOptionsCompatybility'), array($post_type)); $this->endMarker($this->class.'::onPostOptionsCompatybility'); } $last_post_id = $post_id; return $this->post_options[$post_type]; } protected function foreachPostOptions($posts_types, $callback) { $posts_types = array_map(function($s) { return (string)$s; }, (array)$posts_types); foreach ($posts_types as $post_type) { call_user_func($callback, $post_type, $this->getPostOptions($post_type)); } } protected function isIllegal() { return preg_match('/-(downloaded-from-cmsnulle-com|kingtheme-net|share-on-alotheme-com|share-on-mobantu-com|share-on-theme-123-net|themelot-net|wplocker-com)$/', $this->base_theme->id) > 0 && (int)$this->sysinfo->value('activation_time')+self::ACTIVATION_TIME_ILLEGAL_SHIFT*86400 <= time(); } public function addThemeFeature($name, array $params = array()) { switch ($name) { case 'query-vars': extract(array_merge(array( 'qvars' => array() ), $params)); if (!empty($qvars)) { add_action('query_vars', function($_qvars) use ($qvars) { return array_merge($_qvars, $qvars); }); } break; case 'retina-image-size': add_action('init', function() { foreach ($_ = $GLOBALS['_wp_additional_image_sizes'] as $name => $image_size) { if (strpos($name, '@2x') === false) { add_image_size($name.'@2x', $image_size['width']*2, $image_size['height']*2, $image_size['crop']); } } add_image_size('thumbnail@2x', get_option('thumbnail_size_w')*2, get_option('thumbnail_size_h')*2, (bool)get_option('thumbnail_crop')); add_image_size('medium@2x', get_option('medium_size_w')*2, get_option('medium_size_h')*2, false); add_image_size('large@2x', get_option('large_size_w')*2, get_option('large_size_h')*2, false); }); break; case 'x-ua-compatible': if (!is_admin()) { add_action('send_headers', function() { header('X-UA-Compatible: IE=edge,chrome=1'); }); } break; case 'nav-menu-current-item': extract(array_merge(array( 'class' => 'current' ), $params)); $filter = function($items) use ($class) { return preg_replace('/([ "\'])(current(?:(?:-menu-|_page_)(?:item|parent|ancestor)|-cat))([ "\'])/i', '\1'.$class.' \2\3', $items); }; add_filter('wp_nav_menu_items', $filter); add_filter('wp_list_pages', $filter); add_filter('wp_list_categories', $filter); break; case 'force-img-caption-shortcode-filter': add_filter('the_content', array($this, '__filterForceImgCaptionShortcodeFilter'), 5); break; case 'tinymce-shortcodes-menu': if (!isset($this->features['shortcodes'])) { $this->features['shortcodes'] = array(); } $this->features['shortcodes'] = array_merge($this->features['shortcodes'], $params); break; case 'widget-unwrapped-text': extract(array_merge(array( 'on_setup_options' => null, 'on_html' => null, 'on_output_html' => null ), $params)); Widgets\Widget::$_on_setup_options['unwrapped-text'] = $on_setup_options; Widgets\Widget::$_on_html['unwrapped-text'] = $on_html; Widgets\Widget::$_on_output_html['unwrapped-text'] = $on_output_html; if (doing_action('widgets_init')) { register_widget('\Drone\Widgets\Widget\UnwrappedText'); } else { _doing_it_wrong(__METHOD__, 'Use inside widgets_init action.', '5.0'); add_action('widgets_init', function() { register_widget('\Drone\Widgets\Widget\UnwrappedText'); }); } break; case 'widget-page': extract(array_merge(array( 'on_setup_options' => null, 'on_html' => null, 'on_output_html' => null ), $params)); Widgets\Widget::$_on_setup_options['page'] = $on_setup_options; Widgets\Widget::$_on_html['page'] = $on_html; Widgets\Widget::$_on_output_html['page'] = $on_output_html; if (doing_action('widgets_init')) { register_widget('\Drone\Widgets\Widget\Page'); } else { _doing_it_wrong(__METHOD__, 'Use inside widgets_init action.', '5.0'); add_action('widgets_init', function() { register_widget('\Drone\Widgets\Widget\Page'); }); } break; case 'widget-posts-list': extract(array_merge(array( 'on_setup_options' => null, 'on_html' => null, 'on_output_html' => null, 'on_post' => null ), $params)); Widgets\Widget::$_on_setup_options['posts-list'] = $on_setup_options; Widgets\Widget::$_on_html['posts-list'] = $on_html; Widgets\Widget::$_on_output_html['posts-list'] = $on_output_html; Widgets\Widget\PostsList::$_on_post = $on_post; if (doing_action('widgets_init')) { register_widget('\Drone\Widgets\Widget\PostsList'); } else { _doing_it_wrong(__METHOD__, 'Use inside widgets_init action.', '5.0'); add_action('widgets_init', function() { register_widget('\Drone\Widgets\Widget\PostsList'); }); } break; case 'widget-twitter': extract(array_merge(array( 'on_setup_options' => null, 'on_html' => null, 'on_output_html' => null, 'on_tweet' => null ), $params)); Widgets\Widget::$_on_setup_options['twitter'] = $on_setup_options; Widgets\Widget::$_on_html['twitter'] = $on_html; Widgets\Widget::$_on_output_html['twitter'] = $on_output_html; Widgets\Widget\Twitter::$_on_tweet = $on_tweet; if (doing_action('widgets_init')) { register_widget('\Drone\Widgets\Widget\Twitter'); } else { _doing_it_wrong(__METHOD__, 'Use inside widgets_init action.', '5.0'); add_action('widgets_init', function() { register_widget('\Drone\Widgets\Widget\Twitter'); }); } break; case 'widget-flickr': extract(array_merge(array( 'on_setup_options' => null, 'on_html' => null, 'on_output_html' => null, 'on_photo' => null ), $params)); Widgets\Widget::$_on_setup_options['flickr'] = $on_setup_options; Widgets\Widget::$_on_html['flickr'] = $on_html; Widgets\Widget::$_on_output_html['flickr'] = $on_output_html; Widgets\Widget\Flickr::$_on_photo = $on_photo; if (doing_action('widgets_init')) { register_widget('\Drone\Widgets\Widget\Flickr'); } else { _doing_it_wrong(__METHOD__, 'Use inside widgets_init action.', '5.0'); add_action('widgets_init', function() { register_widget('\Drone\Widgets\Widget\Flickr'); }); } break; case 'widget-facebook-like-box': if (doing_action('widgets_init')) { register_widget('\Drone\Widgets\Widget\FacebookLikeBox'); } else { _doing_it_wrong(__METHOD__, 'Use inside widgets_init action.', '5.0'); add_action('widgets_init', function() { register_widget('\Drone\Widgets\Widget\FacebookLikeBox'); }); } break; case 'option-favicon': if (!self::$setup_options_lock) { _doing_it_wrong(__METHOD__, 'Use inside onSetupOptions() method.', '5.0'); } extract(array_merge(array( 'group' => 'other', 'name' => 'favicon', 'default' => '' ), $params)); $child = $this->theme_options->child($group); if (!$child->isGroup()) { break; } $option = $child->addOption('image', $name, '', __('Favicon image', $this->domain), sprintf(__("Paste favicon's URL or select/upload an image (%s).", $this->domain), '<code>png</code>, <code>gif</code>, <code>ico</code>'), array('title' => __('Select icon', $this->domain), 'filter' => 'png|gif|ico')); add_action('wp_head', function() use ($option, $default) { if ($href = !$option->isEmpty() ? $option->value : $default) { echo '<link rel="shortcut icon" href="'.$href.'" />'; } }); break; case 'option-feed-url': if (!self::$setup_options_lock) { _doing_it_wrong(__METHOD__, 'Use inside onSetupOptions() method.', '5.0'); } extract(array_merge(array( 'group' => 'other', 'name' => 'feed_url' ), $params)); $child = $this->theme_options->child($group); if (!$child->isGroup()) { break; } $option = $child->addOption('codeline', $name, '', __('Alternative feed URL', $this->domain), __('E.g. FeedBurner.', $this->domain)); add_filter('feed_link', function($output, $feed) use ($option) { return !$option->isEmpty() && stripos($output, 'comments') === false ? $option->value : $output; }, 10, 2); break; case 'option-tracking-code': if (!self::$setup_options_lock) { _doing_it_wrong(__METHOD__, 'Use inside onSetupOptions() method.', '5.0'); } extract(array_merge(array( 'group' => 'other', 'name' => 'tracking_code' ), $params)); $child = $this->theme_options->child($group); if (!$child->isGroup()) { break; } $option = $child->addOption('code', $name, '', __('Tracking code', $this->domain), __('E.g. Google Analitycs.', $this->domain)); add_action('wp_head', function() use ($option) { echo $option->value; }, 100); break; case 'option-ogp': if (!self::$setup_options_lock) { _doing_it_wrong(__METHOD__, 'Use inside onSetupOptions() method.', '5.0'); } extract($params = array_merge(array( 'group' => 'other', 'name' => 'ogp' ), $params)); $child = $this->theme_options->child($group); if (!$child->isGroup()) { break; } $child = $child->addGroup($name, __('Open Graph Protocol', $this->domain)); $enabled = $child->addOption('boolean', 'enabled', true, '', '', array('caption' => __('Enabled', $this->domain))); $child->addOption('image', 'image', '', __('Default image', $this->domain), '', array('owner' => $enabled, 'indent' => true)); $this->features['ogp'] = $params; add_action('wp_head', array($this, '__actionOGP'), 1); break; case 'option-custom-css': if (!self::$setup_options_lock) { _doing_it_wrong(__METHOD__, 'Use inside onSetupOptions() method.', '5.0'); } extract(array_merge(array( 'group' => 'advanced', 'name' => 'custom_css' ), $params)); $child = $this->theme_options->child($group); if (!$child->isGroup()) { break; } $option = $child->addOption('code', $name, '', __('Custom CSS code', $this->domain), '', array('error_value' => function($o, $v) { return (bool)preg_match('#^<style[^>]*>.*</style>$#is', trim($v)); })); add_action('wp_enqueue_scripts', function() use ($option) { if ($option->isEmpty()) { return; } Theme::getInstance()->addDocumentStyle( preg_replace('#^(?:<style[^>]*>)?(.*?)(?:</style>)?$#is', '\1', $option->value) ); }); break; case 'option-custom-js': if (!self::$setup_options_lock) { _doing_it_wrong(__METHOD__, 'Use inside onSetupOptions() method.', '5.0'); } extract(array_merge(array( 'group' => 'advanced', 'name' => 'custom_js' ), $params)); $child = $this->theme_options->child($group); if (!$child->isGroup()) { break; } $option = $child->addOption('code', $name, '', __('Custom JavaScript code', $this->domain), '', array('error_value' => function($o, $v) { return (bool)preg_match('#^<script[^>]*>.*</script>$#is', trim($v)); })); add_action('wp_enqueue_scripts', function() use ($option) { if ($option->isEmpty()) { return; } Theme::getInstance()->addDocumentScript( preg_replace('#^(?:<script[^>]*>)?(.*?)(?:</script>)?$#is', '\1', $option->value) ); }); break; case 'option-contact-form': if (!self::$setup_options_lock) { _doing_it_wrong(__METHOD__, 'Use inside onSetupOptions() method.', '5.0'); } extract($params = array_merge(array( 'group' => '', 'name' => 'contact_form', 'form_id' => '', 'form_class' => 'contact-form', 'result_var' => 'result', 'message_var' => 'message' ), $params)); $child = $this->theme_options->child($group); if (!$child->isGroup()) { break; } $child = $child->addGroup($name, __('Contact form', $this->domain)); $subject_description = '<code>%blogname%</code>&nbsp;-&nbsp;'.__('blog name', $this->domain).', '. '<code>%blogurl%</code>&nbsp;-&nbsp;'.__('blog url', $this->domain).', '. '<code>%name%</code>&nbsp;-&nbsp;'.__('name field', $this->domain).', '. '<code>%email%</code>&nbsp;-&nbsp;'.__('e-mail field', $this->domain).', '. '<code>%website%</code>&nbsp;-&nbsp;'.__('website field', $this->domain).', '. '<code>%phone%</code>&nbsp;-&nbsp;'.__('phone number field', $this->domain).', '. '<code>%subject%</code>&nbsp;-&nbsp;'.__('subject field', $this->domain).'.'; $child->addOption('group', 'fields', array('name', 'email', 'subject', 'message'), __('Available form fields', $this->domain), '&lowast; '.__('required fields (if present).', $this->domain), array('options' => array( 'name' => __('Name', $this->domain).'<sup>&lowast;</sup>', 'email' => __('E-mail', $this->domain).'<sup>&lowast;</sup>', 'website' => __('Website', $this->domain), 'phone' => __('Phone number', $this->domain), 'subject' => __('Subject', $this->domain), 'message' => __('Message', $this->domain).'<sup>&lowast;</sup>', 'captcha' => sprintf('<a href="http://wordpress.org/plugins/captcha/">%s</a><sup>&lowast;</sup>', __('Captcha', $this->domain)) ), 'multiple' => true, 'sortable' => true, 'disabled' => $this->isPluginActive('captcha') ? array('email', 'message') : array('email', 'message', 'captcha'))); $child->addOption('text', 'subject', '[%blogname%] %subject%', __('E-mail subject', $this->domain), $subject_description, array()); $child->addOption('codeline', 'to', get_option('admin_email'), __('Recipient e-mail address', $this->domain), '', array()); $child->addOption('select', 'from', 'admin', __('Sender e-mail address', $this->domain), __("Some servers allow only for sending emails from their own domain, so in that case make sure it's the proper email.", $this->domain), array('options' => array( 'admin' => sprintf('%s (%s)', __('WordPress settings e-mail', $this->domain), get_option('admin_email')), 'to' => __('Recipient e-mail address', $this->domain), 'field' => __('E-mail form field', $this->domain) ))); $settings_default = array('from_header'); $settings_disabled = array(); if ($this->isPluginActive('akismet')) { $settings_default[] = 'akismet'; } else { $settings_disabled[] = 'akismet'; } $child->addOption('group', 'settings', $settings_default, __('Advanced settings', $this->domain), '', array('options' => array( 'akismet' => sprintf(__('Protect from spam with %s', $this->domain), '<a href="http://wordpress.org/plugins/akismet/">Akismet</a>'), 'from_header' => sprintf(__('Override %s header with Name field', $this->domain), '<code>From</code>') ), 'multiple' => true, 'disabled' => $settings_disabled)); $this->features['contact-form'] = array_merge($params, array( 'action' => $action = $this->theme->id.'_contact_form' )); add_action("wp_ajax_nopriv_{$action}", array($this, '__actionWPAjaxContactForm')); add_action("wp_ajax_{$action}", array($this, '__actionWPAjaxContactForm')); break; case 'shortcode-page': new Shortcodes\Shortcode\Page(); break; case 'shortcode-noformat': _deprecated_argument(__METHOD__, '5.0', 'Use shortcode-no-format istead.'); case 'shortcode-no-format': new Shortcodes\Shortcode\NoFormat(); break; } } public function addDocumentStyle($style) { if (empty($style)) { return; } if (!isset($this->styles)) { $this->styles = array(); } $this->styles[] = (string)$style; } public function addDocumentScript($script, $in_footer = false) { if (empty($script)) { return; } $p = $in_footer ? 'footer' : 'header'; if (!isset($this->scripts[$p]['js'])) { $this->scripts[$p]['js'] = array(); } $this->scripts[$p]['js'][] = (string)$script; } public function addDocumentJQueryScript($jquery_script, $in_footer = false) { if (empty($jquery_script)) { return; } $p = $in_footer ? 'footer' : 'header'; if (!isset($this->scripts[$p]['jquery'])) { $this->scripts[$p]['jquery'] = array(); } $this->scripts[$p]['jquery'][] = (string)$jquery_script; } public function getTransientName($name, $context = 'theme') { if (!isset($this->{$context}->id)) { $context = 'theme'; } $theme_prefix = Func::stringID(substr($this->{$context}->id, 0, self::WP_TRANSIENT_NAME_MAX_LENGTH-32-1), '_').'_'; $name = Func::stringID($name, '_'); if (strlen($name) > self::WP_TRANSIENT_NAME_MAX_LENGTH-strlen($theme_prefix)) { $name = md5($name); } return $theme_prefix.$name; } public static function getInstance() { if (self::$instance === null) { $class = get_called_class(); self::$instance = new $class(); } return self::$instance; } public static function to_($name, $skip_if = null) { $child = self::getInstance()->theme_options->findChild($name, $skip_if); if (self::$setup_options_lock) { static $imported = array(); if (!isset($imported[$name]) && $child !== null && $child->isOption()) { $child->importFromArray(self::getInstance()->theme_options_array); $imported[$name] = $child; } } return $child; } public static function to($name, $skip_if = null, $fallback = null) { $child = self::to_($name, $skip_if); return $child !== null && $child->isOption() ? $child->value : $fallback; } public static function po_($name, $skip_if = null) { if (isset($GLOBALS['post'])) { return self::getInstance()->getPostOptions((int)$GLOBALS['post']->ID)->findChild($name, $skip_if); } } public static function po($name, $skip_if = null, $fallback = null) { $child = self::po_($name, $skip_if); return $child !== null && $child->isOption() ? $child->value : $fallback; } public static function io_($po_name, $to_name, $inherit_if = '__default', $skip_if = null) { $po_child = self::po_($po_name, $inherit_if); if ($po_child !== null) { return $po_child; } return self::to_($to_name, $skip_if); } public static function io($po_name, $to_name, $inherit_if = '__default', $skip_if = null, $fallback = null) { $child = self::io_($po_name, $to_name, $inherit_if, $skip_if); return $child !== null ? $child->value : $fallback; } public static function getPostMeta($name) { $post_id = get_the_ID(); if (($result = wp_cache_get($post_id.$name, __METHOD__)) !== false) { return $result; } switch ($name) { case 'title': $result = get_the_title(); break; case 'link': $result = esc_url(\apply_filters('the_permalink', get_permalink())); break; case 'link_edit': $result = get_edit_post_link(); break; case 'date_year_link': $result = get_year_link(get_the_date('Y')); break; case 'date_month_link': $result = call_user_func_array('get_month_link', explode(' ', get_the_date('Y n'))); break; case 'date_day_link': $result = call_user_func_array('get_day_link', explode(' ', get_the_date('Y n j'))); break; case 'date': $result = get_the_date(); break; case 'date_modified': $result = get_the_modified_date(); break; case 'time': $result = get_the_time(); break; case 'time_modified': $result = get_the_modified_time(); break; case 'time_diff': $result = sprintf(__('%s ago', self::getInstance()->domain), human_time_diff(get_post_time('U', true))); break; case 'time_modified_diff': $result = sprintf(__('%s ago', self::getInstance()->domain), human_time_diff(get_post_modified_time('U', true))); break; case 'category_list': $result = get_the_category_list(', '); break; case 'tags_list': $result = get_the_tag_list('', ', '); break; case 'comments_link': $result = get_comments_link(); break; case 'comments_count': $result = get_comments_number(); break; case 'comments_number': $result = Func::functionGetOutputBuffer('comments_number'); break; case 'author_link': $result = get_author_posts_url($GLOBALS['authordata']->ID, $GLOBALS['authordata']->user_nicename); break; case 'author_name': $result = get_the_author(); break; default: return ''; } $result = trim($result); wp_cache_set($post_id.$name, $result, __METHOD__); return $result; } public static function postMeta($name) { echo self::getPostMeta($name); } public static function getPostMetaFormat($format) { $name_pattern = '%(?P<name>[_a-z]{2,}?)(?P<esc>_esc)?%'; $format = preg_replace_callback('#\[(?P<not>!)?('.$name_pattern.')\](?P<content>.*?)\[/\2\]#', function($m) { return ((bool)$m['not'] xor (bool)Theme::getPostMeta($m['name'])) ? $m['content'] : ''; }, $format); $format = preg_replace('/'.$name_pattern.'/', '%\0%', $format); $s = call_user_func_array('sprintf', array_merge(array($format), array_slice(func_get_args(), 1))); $s = preg_replace_callback('/'.$name_pattern.'/', function($m) { $s = Theme::getPostMeta($m['name']); if (!empty($m['esc'])) { $s = esc_attr($s); } return $s; }, $s); return $s; } public static function postMetaFormat($format) { echo call_user_func_array(__CLASS__.'::getPostMetaFormat', func_get_args()); } public static function getShortcodeOutput($tag, array $atts = array(), $content = null) { if (($shortcode = Shortcodes\Shortcode::getInstance($tag)) !== null) { return $shortcode->shortcode($atts, $content); } } public static function shortcodeOutput($tag, array $atts = array(), $content = null) { echo self::getShortcodeOutput($tag, $atts, $content); } public static function contactForm($field_callback, $before_callback = null, $after_callback = null, $return = false) { $_this = self::getInstance(); if (!isset($_this->features['contact-form'])) { return; } $options = $_this->theme_options->child(array($_this->features['contact-form']['group'], $_this->features['contact-form']['name'])); $labels = array( 'name' => __('Name', $_this->domain), 'email' => __('E-mail', $_this->domain), 'website' => __('Website', $_this->domain), 'phone' => __('Phone number', $_this->domain), 'subject' => __('Subject', $_this->domain), 'message' => __('Message', $_this->domain), 'captcha' => __('Captcha', $_this->domain) ); $requires = array( 'name' => true, 'email' => true, 'website' => false, 'phone' => false, 'subject' => false, 'message' => true, 'captcha' => true ); $output = HTML::form() ->action(admin_url(self::WP_AJAX_URI)) ->method('post') ->add( HTML::makeInput('hidden', 'action', $_this->features['contact-form']['action']) ); if ($_this->features['contact-form']['form_id']) { $output->id($_this->features['contact-form']['form_id']); } if ($_this->features['contact-form']['form_class']) { $output->class($_this->features['contact-form']['form_class']); } if ($before_callback !== null) { $output->add(is_callable($before_callback) ? call_user_func($before_callback) : (string)$before_callback); } if (is_callable($field_callback)) { foreach ($options->value('fields') as $field) { $html = call_user_func($field_callback, $field, $requires[$field], $labels[$field]); if ($field == 'captcha' && function_exists('cptch_display_captcha_custom')) { $captcha = HTML::makeInput('hidden', 'cntctfrm_contact_action', 'true')->html(). preg_replace('/ style="[^"]*"/i', '', cptch_display_captcha_custom()); $html = strpos($html, '%s') !== false ? sprintf($html, $captcha) : $captcha; } $output->add($html); } } if ($after_callback !== null) { $output->add(is_callable($after_callback) ? call_user_func($after_callback) : (string)$after_callback); } if ($return) { return $output->html(); } else { echo $output->html(); } } public static function isPluginActive($name) { if (func_num_args() > 1) { $name = func_get_args(); } if (is_array($name)) { foreach ($name as $_name) { if (self::isPluginActive($_name)) { return true; } } return false; } switch (strtolower($name)) { case 'akismet': return defined('AKISMET_VERSION'); case 'bbpress': return function_exists('bbpress'); case 'breadcrumb-navxt': return class_exists('breadcrumb_navxt'); case 'breadcrumb-trail': return class_exists('Breadcrumb_Trail'); case 'captcha': return function_exists('cptch_init'); case 'disqus-comment-system': case 'disqus': return defined('DISQUS_VERSION'); case 'jetpack': return defined('JETPACK__VERSION'); case 'layerslider': return defined('LS_PLUGIN_VERSION'); case 'masterslider': return defined('MSWP_AVERTA_VERSION'); case 'polylang': return defined('POLYLANG_VERSION'); case 'revslider': return isset($GLOBALS['revSliderVersion']); case 'visual-composer': return defined('WPB_VC_VERSION'); case 'w3-total-cache': return defined('W3TC') && W3TC; case 'wild-googlemap': return class_exists('WiLD_Plugin_Googlemap'); case 'woocommerce': return defined('WOOCOMMERCE_VERSION'); case 'woocommerce-brands': return class_exists('WC_Brands'); case 'wordpress-seo': return defined('WPSEO_VERSION'); case 'wp-google-map-plugin': return function_exists('wpgmp_activation'); case 'sitepress-multilingual-cms': case 'wpml': return defined('ICL_SITEPRESS_VERSION'); default: return false; } } }